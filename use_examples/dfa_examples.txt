
POST /deterministic-finite-automaton
{
  "name": "dfa_example",
  "states": ["q0", "q1", "q2"],
  "input_symbols": ["0", "1"],
  "transitions": {
    "q0": { "0": "q1", "1": "q2" },
    "q1": { "0": "q2", "1": "q0" },
    "q2": { "0": "q0", "1": "q1" }
  },
  "initial_state": "q0",
  "final_states": ["q2"]
}

GET /deterministic-finite-automaton
[
  {
    "id": 1,
    "name": "dfa_example",
    "states": ["q0", "q1", "q2"],
    "input_symbols": ["0", "1"],
    "transitions": {
      "q0": { "0": "q1", "1": "q2" },
      "q1": { "0": "q2", "1": "q0" },
      "q2": { "0": "q0", "1": "q1" }
    },
    "initial_state": "q0",
    "final_states": ["q2"]
  }
]

GET /deterministic-finite-automaton/{dfa_id}
GET /deterministic-finite-automaton/1
{
  "id": 1,
  "name": "dfa_example",
  "states": ["q0", "q1", "q2"],
  "input_symbols": ["0", "1"],
  "transitions": {
    "q0": { "0": "q1", "1": "q2" },
    "q1": { "0": "q2", "1": "q0" },
    "q2": { "0": "q0", "1": "q1" }
  },
  "initial_state": "q0",
  "final_states": ["q2"]
}

POST /deterministic-finite-automaton/{dfa_id}/accept
POST /deterministic-finite-automaton/1/accept?input_string=101

caso aceite
{
  "accepts": true
}
caso rejeite
{
  "accepts": false
}

GET /deterministic-finite-automaton/{dfa_id}/visualize
GET /deterministic-finite-automaton/1/visualize
retorna o arquivo

more examples
### 1️ DFA that accepts strings ending in '1'
{
  "name": "dfa_ends_with_1",
  "states": ["q0", "q1"],
  "input_symbols": ["0", "1"],
  "transitions": {
    "q0": { "0": "q0", "1": "q1" },
    "q1": { "0": "q1", "1": "q1" }
  },
  "initial_state": "q0",
  "final_states": ["q1"]
}

### 2️ DFA that only accepts strings with an even number of '0's
{
  "name": "dfa_even_zeros",
  "states": ["q0", "q1"],
  "input_symbols": ["0", "1"],
  "transitions": {
    "q0": { "0": "q1", "1": "q0" },
    "q1": { "0": "q0", "1": "q1" }
  },
  "initial_state": "q0",
  "final_states": ["q0"]
}

### 3️ DFA that only accepts the string '101'
{
  "name": "dfa_exact_101",
  "states": ["q0", "q1", "q2", "q3"],
  "input_symbols": ["0", "1"],
  "transitions": {
    "q0": { "1": "q1", "0": "q0" },
    "q1": { "0": "q2", "1": "q1" },
    "q2": { "1": "q3", "0": "q0" },
    "q3": { "0": "q3", "1": "q3" }
  },
  "initial_state": "q0",
  "final_states": ["q3"]
}

### 4️ DFA that accepts strings containing '110' as a substring
{
  "name": "dfa_contains_110",
  "states": ["q0", "q1", "q2", "q3"],
  "input_symbols": ["0", "1"],
  "transitions": {
    "q0": { "1": "q1", "0": "q0" },
    "q1": { "1": "q2", "0": "q0" },
    "q2": { "0": "q3", "1": "q2" },
    "q3": { "0": "q3", "1": "q3" }
  },
  "initial_state": "q0",
  "final_states": ["q3"]
}